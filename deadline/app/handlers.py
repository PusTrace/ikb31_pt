from datetime import datetime
import json
import logging

from aiogram import types, Router, F
from aiogram.filters.command import CommandStart
from aiogram.fsm.context import FSMContext

import app.keyboards as kb
from app.keyboards import clear
from app.states import ReminderStates
from app.utils import load_reminders, save_reminders

logging.basicConfig(level=logging.INFO)


reminders = load_reminders()
deadline = []

router = Router()

@router.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞.\n",
        reply_markup=kb.main,
    )

@router.message(F.text == '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ üìÜ')
async def start_set_reminder(message: types.Message, state: FSMContext):
    user_id = str(message.chat.id)  # ID —á–∞—Ç–∞
    await state.set_state(ReminderStates.waiting_for_name)
    await state.update_data(user_id=user_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å", reply_markup=clear)

@router.message(ReminderStates.waiting_for_name)
async def enter_name(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞‚ùå":
        await state.clear()
        await message.answer("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–¥–ª–∞–π–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=kb.main)
        return

    if not message.text.strip():  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –≤–≤–æ–¥
        await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(name=message.text)
    user_data = await state.get_data()
    logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏: {user_data}")

    await state.set_state(ReminderStates.waiting_for_deadline)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú")

@router.message(ReminderStates.waiting_for_deadline)
async def enter_deadline(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞‚ùå":
        await state.clear()
        await message.answer("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–¥–ª–∞–π–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=kb.main)
        return

    try:
        deadline = datetime.strptime(message.text, "%d.%m")
        user_data = await state.get_data()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        user_id = str(message.chat.id)
        if user_id not in reminders:
            reminders[user_id] = {"reminders": []}

        reminders[user_id]["reminders"].append({
            "name": user_data["name"],
            "deadline": deadline.strftime("%d.%m"),
            "intervals": [0, 1, 2, 3, 7]
        })

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        save_reminders(reminders)
        await state.clear()
        await message.answer(
            f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è {user_data['name']} –Ω–∞ {deadline.strftime('%d.%m')} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!",
            reply_markup=kb.main
        )
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú")



@router.message(F.text.casefold() == '–æ—Ç–º–µ–Ω–∞‚ùå'.casefold())
async def cancel_anywhere(message: types.Message, state: FSMContext):
    if await state.get_state():
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.main)
    else:
        await message.answer("–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è.", reply_markup=kb.main)



@router.message(F.text == '—Å–ª–µ–¥—É—é—â–∏–π –¥–µ–¥–ª–∞–π–Ω ‚û°Ô∏è')
async def info(message: types.Message):
    now = datetime.now()
    user_id = str(message.chat.id)

    if user_id not in reminders or not reminders[user_id]["reminders"]:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return

    # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π  –¥–µ–¥–ª–∞–π–Ω–∞
    user_reminders = reminders[user_id]["reminders"]
    next_deadline = None

    for reminder in user_reminders:
        deadline = datetime.strptime(reminder["deadline"], "%d.%m")
        current_year_deadline = deadline.replace(year=now.year)

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–ª–∏–∂–∞–π—à–∏–π  –¥–µ–¥–ª–∞–π–Ω–∞
        if not next_deadline or current_year_deadline < next_deadline["date"]:
            next_deadline = {"name": reminder["name"], "date": current_year_deadline}

    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –±–ª–∏–∂–∞–π—à–∏–π  –¥–µ–¥–ª–∞–π–Ω–∞
    if next_deadline:
        time_left = next_deadline["date"] - now
        days_left = time_left.days
        hours_left = time_left.seconds // 3600
        minutes_left = (time_left.seconds // 60) % 60

        await message.answer(
            f"–°–ª–µ–¥—É—é—â–∏–π –¥–µ–¥–ª–∞–π–Ω : {next_deadline['name']} —á–µ—Ä–µ–∑ {days_left} –¥–Ω—è, {hours_left} —á–∞—Å–æ–≤ –∏ {minutes_left} –º–∏–Ω—É—Ç.")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –¥–Ω–µ–π –¥–µ–¥–ª–∞–π–Ω–∞.")



@router.message(F.text.casefold() == '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è'.casefold())
async def settings(message: types.Message):
    await message.answer("–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è", reply_markup=kb.settings)

@router.message(F.text.casefold() == '–∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª üóì'.casefold())
async def settings_interval(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞‚ùå":
        await state.clear()
        await message.answer("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.main)
        return
    await state.set_state(ReminderStates.waiting_for_name_settings)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –∫–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª üóì", reply_markup=clear)

@router.message(ReminderStates.waiting_for_name_settings)
async def enter_name(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞‚ùå":
        await state.clear()
        await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.main)
        return

    name_to_check = message.text.strip()  # –ò–º—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —á–µ–ª–æ–≤–µ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user_exists = False
    for user_id, user_info in reminders.items():
        for reminder in user_info["reminders"]:
            if reminder["name"].lower() == name_to_check.lower():  # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏–º–µ–Ω–∞ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
                user_exists = True
                break
        if user_exists:
            break

    if not user_exists:
        # –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –∏–º–µ–Ω–∏ –Ω–µ—Ç –≤ –±–∞–∑–µ
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=kb.main)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await state.update_data(name=name_to_check)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É (–≤–≤–æ–¥ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤)
    await state.set_state(ReminderStates.waiting_for_interval_settings)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n"
                         "–ü—Ä–∏–º–µ—Ä: 1, 7, 30\n"
                         "–≠—Ç–æ –∏–∑–º–µ–Ω–∏—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ç–∞–∫, —á—Ç–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –ø—Ä–∏–¥—É—Ç –∑–∞ 1, 7, 30 –¥–Ω–µ–π")

@router.message(ReminderStates.waiting_for_interval_settings)
async def enter_interval(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞‚ùå":
        await state.clear()
        await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.main)
        return

    try:
        user_interval_str = str(message.text)
        user_interval = [int(item.strip()) for item in user_interval_str.split(",")]
        user_data = await state.get_data()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        user_id = str(message.chat.id)
        if user_id not in reminders:
            reminders[user_id] = {"reminders": []}

        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for reminder in reminders[user_id]["reminders"]:
            if reminder["name"] == user_data["name"]:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
                reminder["intervals"] = user_interval  # –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
                break

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        save_reminders(reminders)

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await state.clear()
        await message.answer(
            f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è {user_data['name']} –Ω–∞ {user_interval_str} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!",
            reply_markup=kb.main
        )
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 1, 7, 30")


# –í—ã–≤–µ—Å—Ç–∏ –≤—Å—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö üìÇ
@router.message(F.text.casefold() == '–í—ã–≤–µ—Å—Ç–∏ –≤—Å—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö üìÇ'.casefold())
async def settings_interval(message: types.Message):

    user_id = str(message.chat.id)
    if user_id not in reminders:
        reminders[user_id] = {"reminders": []}
        output_database = "—É –≤–∞—Å –µ—â—ë –Ω–µ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
    else:
        user_data = reminders.get(user_id, {})
        output_database = json.dumps(user_data, ensure_ascii=False, indent=4)

    await message.answer(output_database, reply_markup=kb.main)

@router.message(F.text.casefold() == '—É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å üîí'.casefold())
async def delete_entry(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞‚ùå":
        await state.clear()
        await message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.main)
        return

    await state.set_state(ReminderStates.waiting_for_name_delete)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –∫–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å üîí", reply_markup=clear)

@router.message(ReminderStates.waiting_for_name_delete)
async def confirm_deletion(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞‚ùå":
        await state.clear()
        await message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.main)
        return

    name_to_delete = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
    user_id = str(message.chat.id)
    record_found = False

    if user_id in reminders:
        for reminder in reminders[user_id]["reminders"]:
            if reminder["name"].lower() == name_to_delete.lower():
                reminders[user_id]["reminders"].remove(reminder)
                record_found = True
                break

        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –±–æ–ª—å—à–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π
        if not reminders[user_id]["reminders"]:
            del reminders[user_id]

    if record_found:
        save_reminders(reminders)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await message.answer(f"–ó–∞–ø–∏—Å—å –¥–ª—è {name_to_delete} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", reply_markup=kb.main)
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=kb.main)

    await state.clear()


@router.message(F.text.casefold() == 'help'.casefold())
async def about_us(message: types.Message):
    await message.answer(
        "Github: https://github.com/PusTrace/ikb31_pt\n"
        "–ß—Ç–æ–±—ã —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–∏–∫ –æ—Ç github –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º –∞–∫–∫–∞—É–Ω—Ç.\n"
        "–¢–µ–ª–µ–≥—Ä–∞–º: https://t.me/PusTrace"
        , reply_markup=kb.main)