import asyncio
from datetime import datetime
import os

from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage

from apscheduler.schedulers.asyncio import AsyncIOScheduler

from app.handlers import router
from app.utils import load_reminders

# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=TOKEN)

storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await bot_health_check()
    dp.include_router(router)
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = AsyncIOScheduler()
    scheduler.add_job(check_and_send_reminders,  "cron", hour=9, minute=0)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9 —É—Ç—Ä–∞
    scheduler.start()
    try:
        await dp.start_polling(bot)
    except Exception as e:
        print(f"error: {e}")
    finally:
        scheduler.shutdown()
        await bot.session.close()

reminders = load_reminders()
# send messages
async def check_and_send_reminders():
    now = datetime.now()
    for user_id, user_data in reminders.items():
        for reminder in user_data["reminders"]:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–µ–π –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            birthday = datetime.strptime(reminder["birthday"], "%d.%m.%Y")
            current_year_birthday = birthday.replace(year=now.year)

            # –ï—Å–ª–∏ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É–∂–µ –ø—Ä–æ—à—ë–ª –≤ —ç—Ç–æ–º –≥–æ–¥—É, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π
            if current_year_birthday < now:
                current_year_birthday = current_year_birthday.replace(year=now.year + 1)

            days_left = (current_year_birthday - now).days
            if days_left in reminder["intervals"]:  # –ï—Å–ª–∏ –¥–æ –î–† –æ—Å—Ç–∞–ª–æ—Å—å —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
                try:
                    await bot.send_message(
                        user_id,
                        f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {reminder['name']} —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π! üéâ"
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {user_id}: {e}")

# –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
async def bot_health_check():
    chat_ids = [1185330189]#, 6011302552
    try:
        for chat_id in chat_ids:
            await bot.send_message(
                chat_id,
                text="admin check health\n"
                     "/start\n"
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


if __name__ == "__main__":
    asyncio.run(main())
